version: '3.4'

services:

    elasticsearch:
     container_name: ELK
     image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
     ports:
      - "9200:9200"
      - "9300:9300"
     environment:
      discovery.type: "single-node"
      ES_JAVA_OPTS: "-Xms2g -Xmx2g"
      xpack.monitoring.enabled: "true"
     volumes:
      - ./elastic-data:/usr/share/elasticsearch/data

    kibana: 
        image: docker.elastic.co/kibana/kibana:7.7.0
        ports:
        - "5601:5601"
        environment:
            ELASTICSEARCH_URL: http://elasticsearch:9200
        depends_on:
        - elasticsearch
    MySQLdb:
        image: mysql/mysql-server:latest
        container_name: DBMySQL
        restart: always
        environment:
        - MYSQL_DATABASE=mysqlDB
        - MYSQL_ROOT_PASSWORD=mysqlPW
        ports:
        - '3306:3306'
        volumes:
        - mysql-volume:/var/lib/mysql
    RedisCache:
        image: redis:6.2-alpine
        container_name: DBCache
        restart: always
        ports:
        - '6379:6379'
        command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
        volumes: 
        - redis-data:/data

    rabbitmq:
        image: rabbitmq:3-management-alpine
        container_name: 'Mensageria'
        ports:
        - 5672:5672
        - 15672:15672
        volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
        networks:
            - mq_net
    sonarqube:
         image: sonarqube:lts-community
         depends_on:
            - sonar_db
         environment:
            SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
            SONAR_JDBC_USERNAME: sonar
            SONAR_JDBC_PASSWORD: sonar
         ports:
            - "9001:9000"
         volumes:
            - sonarqube_conf:/opt/sonarqube/conf
            - sonarqube_data:/opt/sonarqube/data
            - sonarqube_extensions:/opt/sonarqube/extensions
            - sonarqube_logs:/opt/sonarqube/logs
            - sonarqube_temp:/opt/sonarqube/temp

    sonar_db:
        image: postgres:13
        environment:
            POSTGRES_USER: sonar
            POSTGRES_PASSWORD: sonar
            POSTGRES_DB: sonar
        volumes:
            - sonar_db:/var/lib/postgresql
            - sonar_db_data:/var/lib/postgresql/data    

    service.consumidor.worker:
        image: ${DOCKER_REGISTRY-}serviceconsumidorworker
        container_name: WorkerProcessamento
        build:
            context: .
            dockerfile: service.consumidor.worker/Dockerfile
   
   # web.consumidor.api:
   #  image: ${DOCKER_REGISTRY-}webconsumidorapi
   #  build:
   #    context: .
   #    dockerfile: web.consumidor.api/Dockerfile

networks:
  mq_net:
    driver: bridge

volumes:
  mysql-volume:
    driver: local
  elastic-data:
    driver: local
  redis-data:
    driver: local
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_db:
  sonar_db_data:
